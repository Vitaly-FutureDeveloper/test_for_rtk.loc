{"version":3,"file":"static/js/554.e5bb39c9.chunk.js","mappings":"wMAAO,SAASA,IACd,OAAOC,KAAKC,UAAY,GAAM,KAAQ,IAAOD,KAAKC,UAAY,GAAM,KAAQ,GAC9E,C,aCGMC,EAAiB,WAErB,IAAAC,GAA0BC,EAAAA,EAAAA,UAASL,KAAUM,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAtCI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GACtBI,GAA0BL,EAAAA,EAAAA,UAASL,KAAUW,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAtCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACtBG,GAA0BT,EAAAA,EAAAA,UAASL,KAAUe,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAtCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,IAEtBG,EAAAA,EAAAA,YAAU,WACRC,YAAW,WACTV,GAAUD,GACVK,GAAUD,GACVK,GAAUD,EACZ,GDZG,WAAgE,IAAvCI,EAAWC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAAGG,EAAWH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IAG7D,OAFAD,EAAMnB,KAAKwB,KAAKL,GAChBI,EAAMvB,KAAKyB,MAAMF,GACVvB,KAAKyB,MAAMzB,KAAKC,UAAYsB,EAAMJ,GAAOA,EAClD,CCQOO,CAAgB,KAAM,MAC3B,GAAG,CAACnB,EAAOI,IAEX,IAAMgB,GAAUC,EAAAA,EAAAA,UAWhB,OATAC,EAAAA,EAAAA,IAAS,WACHF,EAAQG,UACVH,EAAQG,QAAQC,SAASC,GAAKzB,EAC9BoB,EAAQG,QAAQC,SAASE,GAAKtB,EAC9BgB,EAAQG,QAAQC,SAASG,GAAKnB,EAElC,KAIEoB,EAAAA,EAAAA,MAAA,QAAMC,IAAKT,EAAQU,SAAA,EACjBC,EAAAA,EAAAA,KAAA,kBAAgBC,KAAM,CAAC,GAAK,GAAI,OAChCD,EAAAA,EAAAA,KAAA,wBAAsBE,MAAM,UAGlC,EAEA,EAAeC,EAAAA,KAAWvC,E","sources":["utils/getRandoms.ts","components/Ball/Ball.tsx"],"sourcesContent":["export function getRand() {\r\n  return Math.random() * (0.1 - 0.01) + 0.01 - Math.random() * (0.1 - 0.01) + 0.01;\r\n}\r\n\r\nexport function getRandomNumber(min: number = 1, max: number = 10000) {\r\n  min = Math.ceil(min)\r\n  max = Math.floor(max)\r\n  return Math.floor(Math.random() * (max - min) + min)\r\n}","import React, {useEffect, useRef, useState} from 'react';\r\nimport {useFrame} from '@react-three/fiber';\r\nimport {getRand, getRandomNumber} from '../../utils/getRandoms';\r\n\r\n\r\nconst Ball: React.FC = () => {\r\n\r\n  const [randX, setRandX] = useState(getRand());\r\n  const [randY, setRandY] = useState(getRand());\r\n  const [randZ, setRandZ] = useState(getRand());\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setRandX(-randX);\r\n      setRandY(-randY);\r\n      setRandZ(-randZ);\r\n    }, getRandomNumber(1500, 3500));\r\n  }, [randX, randY]);\r\n\r\n  const meshRef = useRef<any>();\r\n\r\n  useFrame(() => {\r\n    if (meshRef.current) {\r\n      meshRef.current.position.x += randX;\r\n      meshRef.current.position.y += randY;\r\n      meshRef.current.position.z += randZ;\r\n    }\r\n  });\r\n\r\n\r\n  return (\r\n    <mesh ref={meshRef}>\r\n      <sphereGeometry args={[0.3, 30, 30]}/>\r\n      <meshStandardMaterial color=\"red\"/>\r\n    </mesh>\r\n  );\r\n};\r\n\r\nexport default React.memo(Ball);"],"names":["getRand","Math","random","Ball","_useState","useState","_useState2","_slicedToArray","randX","setRandX","_useState3","_useState4","randY","setRandY","_useState5","_useState6","randZ","setRandZ","useEffect","setTimeout","min","arguments","length","undefined","max","ceil","floor","getRandomNumber","meshRef","useRef","useFrame","current","position","x","y","z","_jsxs","ref","children","_jsx","args","color","React"],"sourceRoot":""}